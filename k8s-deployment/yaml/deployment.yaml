##############################
# ServiceAccount & ClusterRole
##############################
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: process-agent
  labels:
    app.kubernetes.io/name: process-agent
    app.kubernetes.io/instance: process-agent
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: process-agent
  labels:
    app.kubernetes.io/name: process-agent
    app.kubernetes.io/instance: process-agent
rules:
- apiGroups:  # Kubelet connectivity
  - ""
  resources:
  - nodes/metrics
  - nodes/proxy
  - nodes/spec
  - endpoints
  - pods
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: process-agent
  labels:
    app.kubernetes.io/name: process-agent
    app.kubernetes.io/instance: process-agent
  annotations:
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: process-agent
subjects:
- apiGroup: ""
  kind: ServiceAccount
  name: process-agent
  namespace: default
---
##############################
# Agent daemonset
##############################
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: process-agent
  labels:
    app: process-agent
spec:
  selector:
    matchLabels:
      app: process-agent
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 100
    type: RollingUpdate
  template:
    metadata:        
      labels:
        app: process-agent
    spec:
      containers:
      - name: process-agent
        # We use the latest master image and then we will replace the binaries inside it.
        image: "quay.io/stackstate/stackstate-k8s-process-agent:master"
        imagePullPolicy: IfNotPresent
        ports:
          - name: debug
            containerPort: 6062
            protocol: TCP
          - name: metrics
            containerPort: 6063
            protocol: TCP
        command:
          - "/suse/process-agent"
        args:
          - "-config=/suse/config.yaml"
        volumeMounts:
        - name: crisocket
          mountPath: /var/run/crio/crio.sock
          readOnly: true
        - name: containerdsocket
          mountPath: /var/run/containerd/containerd.sock
          readOnly: true
        - name: sys-kernel-debug
          mountPath: /sys/kernel/debug
          # Having sys-kernel-debug as read only breaks specific monitors from receiving metrics
          # readOnly: true
        - name: dockersocket
          mountPath: /var/run/docker.sock
          readOnly: true
        # The agent needs access to /etc to figure out what os it is running on.
        - name: etcdir
          mountPath: /host/etc
          readOnly: true
        - name: procdir
          mountPath: /host/proc
        # We have an agent option STS_DISABLE_BPF_JIT_HARDEN that write to /proc. this is a debug setting but if we want to use
        # it, we have the option to make /proc writable.
          readOnly: true
        - name: passwd
          mountPath: /etc/passwd
          readOnly: true
        - name: cgroups
          mountPath: /host/sys/fs/cgroup
          readOnly: true
        - name: suse-folder
          mountPath: /suse
        securityContext:
          privileged: true
      dnsPolicy: ClusterFirstWithHostNet
      hostNetwork: false
      hostPID: true
      serviceAccountName: process-agent
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - hostPath:
          path: /var/lib/kubelet
        name: kubelet
      - hostPath:
          path: /var/lib/nfs
        name: nfs
      - hostPath:
          path: /var/lib/docker/overlay2
        name: dockeroverlay2
      - hostPath:
          path: /run/docker/netns
        name: dockernetns
      - hostPath:
          path: /var/run/crio/crio.sock
        name: crisocket
      - hostPath:
          path: /var/run/containerd/containerd.sock
        name: containerdsocket
      - hostPath:
          path: /sys/kernel/debug
        name: sys-kernel-debug
      - hostPath:
          path: /var/run/docker.sock
        name: dockersocket
      - hostPath:
          path: /proc
        name: procdir
      - hostPath:
          path: /etc
        name: etcdir
      - hostPath:
          path: /etc/passwd
        name: passwd
      - hostPath:
          path: /sys/fs/cgroup
        name: cgroups
      - hostPath:
          path: /suse
        name: suse-folder
---
apiVersion: v1
kind: Service
metadata:
  name: process-agent-service
spec:
  type: NodePort
  selector:
    app: process-agent
  ports:
  - name: prometheus-metrics
    port: 6063
    protocol: TCP
  - name: debug-metrics
    port: 6062
    protocol: TCP
---
##############################
# Loader agent to copy files on each node
##############################
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: loader-agent
  labels:    
    app: loader-agent
spec:
  selector:
    matchLabels:
      app: loader-agent
  template:
    metadata:        
      labels:
        app: loader-agent
    spec:
      containers:
      - name: loader-agent
        image: ubuntu:latest
        imagePullPolicy: IfNotPresent
        command: ["sh","-c","sleep infinity"]
        volumeMounts:
        - name: suse-folder
          mountPath: /suse
      volumes:
      - hostPath:
          path: /suse
        name: suse-folder
---
##############################
# Test Server with its service
##############################
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: test-server
  template:
    metadata:
      labels:
        app: test-server
    spec:
      containers:
      - name: test-server
        image: ubuntu:latest
        ports:
          - containerPort: 7077
        imagePullPolicy: IfNotPresent
        command: ["/suse/test-server"]
        volumeMounts:
          - name: suse-folder
            mountPath: /suse
        env:
          - name: CONFIG_PATH # Path to the configuration server configuration file
            value: "/suse/config.json"
      volumes:
      - hostPath:
          path: /suse
        name: suse-folder
---
apiVersion: v1
kind: Service
metadata:
  name: test-server-service
spec:
  selector:
    app: test-server
  ports:
  - protocol: TCP
    port: 7077 # ClusterIP Port
    targetPort: 7077 # Container Port
---
##############################
# Otel collector
##############################
apiVersion: v1
kind: ConfigMap
metadata:
  name: otel-collector-config
  labels:
    app: opentelemetry
    component: collector
data:
  # logging verbosity 'basic', 'normal' o 'detailed'
  config.yaml: |
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
    processors:
      batch:
    exporters:
      debug:
        verbosity: normal
      prometheus:
        endpoint: 0.0.0.0:9464
    service:
      pipelines:
        traces:
          receivers: [otlp]
          processors: [batch]
          exporters: [debug]
        metrics:
          receivers: [otlp]
          processors: [batch]
          exporters: [debug, prometheus]
        logs:
          receivers: [otlp]
          processors: [batch]
          exporters: [debug]
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: otel-collector-deployment
  labels:
    app: opentelemetry
    component: collector
spec:
  replicas: 1
  selector:
    matchLabels:
      app: opentelemetry
      component: collector
  template:
    metadata:
      labels:
        app: opentelemetry
        component: collector
    spec:
      containers:
        - name: otel-collector
          image: otel/opentelemetry-collector-contrib:latest
          args:
            - "--config=/etc/config.yaml"
          ports:
            - name: otlp-grpc
              containerPort: 4317
              protocol: TCP
            - name: otlp-http
              containerPort: 4318
              protocol: TCP
            - name: prom-metrics
              containerPort: 9464
              protocol: TCP
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config.yaml
              subPath: config.yaml
      volumes:
        - name: config-volume
          configMap:
            name: otel-collector-config
            items:
            - key: config.yaml
              path: config.yaml
---
apiVersion: v1
kind: Service
metadata:
  name: otel-collector-service
  labels:
    app: opentelemetry
    component: collector
spec:
  selector:
    app: opentelemetry
    component: collector
  ports:
    - name: otlp-grpc
      protocol: TCP
      port: 4317
      targetPort: 4317
    - name: otlp-http
      protocol: TCP
      port: 4318
      targetPort: 4318
    - name: prom-metrics
      protocol: TCP
      port: 9464
      targetPort: 9464
  type: ClusterIP
---
##############################
# Prometheus
##############################
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
- apiGroups: [""]
  resources:
  - nodes
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: default
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
data:
  prometheus.yml: |
    global:
      scrape_interval: 10s
    scrape_configs:
      - job_name: 'otel-collector'
        static_configs:
          - targets: ['otel-collector-service.default.svc.cluster.local:9464']
      - job_name: 'process-agent'
        static_configs:
          - targets: ['process-agent-service.default.svc.cluster.local:6063']
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  labels:
    app.kubernetes.io/name: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prometheus
    spec:
      serviceAccountName: prometheus
      containers:
      - name: prometheus
        image: prom/prometheus:v2.53.0
        args:
          - "--config.file=/etc/prometheus/prometheus.yml"
        ports:
        - name: web
          containerPort: 9090
        volumeMounts:
        - name: config-volume
          mountPath: /etc/prometheus
      volumes:
      - name: config-volume
        configMap:
          name: prometheus-config
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
spec:
  type: NodePort
  selector:
    app.kubernetes.io/name: prometheus
  ports:
  - name: web
    port: 9090
    targetPort: web
